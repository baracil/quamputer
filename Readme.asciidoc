= Quamputer : Yet Another Quantum Computer Simulator
:author: Bastien Aracil

WARNING: Work in Progress


== Code Sample

```rust
use quamputer::computer::QuantumComputer;
use quamputer::gate::Gate::{Hadamard, CNot};
use quamputer::measure::Measure;

fn main() {
    let computer = QuantumComputer::new(3);
    let mut circuit_builder = computer.new_circuit_builder();

    circuit_builder
        .start_advanced_loop(|_,c| c.get_nb_zero("q0") >= 10 )
        .push(Hadamard(0))
        .push(CNot(0,[1]))
        .push(CNot(1,[2]))
        .push(Measure::new("q0",0))
        .end_loop()
        .unwrap();



    let executable = computer.compile(&circuit_builder.build().unwrap());

    let initial_state = computer.zero_state();
    let result = executable.execute(&initial_state);

    println!("input     : {:?}", initial_state);
    println!("result    : {:?}", result.current_state());
    println!("result q0 : {:?}", result.get_count("q0"));
}
```

This will print:
```
input  : State 2 qbits :  (1.000000,0.000000)x|00> (0.000000,0.000000)x|01> (0.000000,0.000000)x|10> (0.000000,0.000000)x|11>
result : State 2 qbits :  (0.707107,0.000000)x|00> (0.000000,0.000000)x|01> (0.000000,0.000000)x|10> (0.707107,0.000000)x|11>

```
